// source: proto/mario.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.sm64js.AccessCodeMsg', null, global);
goog.exportSymbol('proto.sm64js.AnnouncementMsg', null, global);
goog.exportSymbol('proto.sm64js.AttackMsg', null, global);
goog.exportSymbol('proto.sm64js.AuthorizedUserMsg', null, global);
goog.exportSymbol('proto.sm64js.ChatMsg', null, global);
goog.exportSymbol('proto.sm64js.ControllerMsg', null, global);
goog.exportSymbol('proto.sm64js.FlagMsg', null, global);
goog.exportSymbol('proto.sm64js.GrabFlagMsg', null, global);
goog.exportSymbol('proto.sm64js.InitGameDataMsg', null, global);
goog.exportSymbol('proto.sm64js.InitializationMsg', null, global);
goog.exportSymbol('proto.sm64js.InitializationMsg.MessageCase', null, global);
goog.exportSymbol('proto.sm64js.JoinGameMsg', null, global);
goog.exportSymbol('proto.sm64js.MarioListMsg', null, global);
goog.exportSymbol('proto.sm64js.MarioMsg', null, global);
goog.exportSymbol('proto.sm64js.PingMsg', null, global);
goog.exportSymbol('proto.sm64js.PlayerListsMsg', null, global);
goog.exportSymbol('proto.sm64js.RequestCosmeticsMsg', null, global);
goog.exportSymbol('proto.sm64js.RootMsg', null, global);
goog.exportSymbol('proto.sm64js.RootMsg.MessageCase', null, global);
goog.exportSymbol('proto.sm64js.SkinData', null, global);
goog.exportSymbol('proto.sm64js.SkinMsg', null, global);
goog.exportSymbol('proto.sm64js.SkinValue', null, global);
goog.exportSymbol('proto.sm64js.SkinValue.SpecialSkinValues', null, global);
goog.exportSymbol('proto.sm64js.SkinValue.ValueCase', null, global);
goog.exportSymbol('proto.sm64js.Sm64JsMsg', null, global);
goog.exportSymbol('proto.sm64js.Sm64JsMsg.MessageCase', null, global);
goog.exportSymbol('proto.sm64js.ValidPlayersMsg', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.RootMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sm64js.RootMsg.oneofGroups_);
};
goog.inherits(proto.sm64js.RootMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.RootMsg.displayName = 'proto.sm64js.RootMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.Sm64JsMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sm64js.Sm64JsMsg.oneofGroups_);
};
goog.inherits(proto.sm64js.Sm64JsMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.Sm64JsMsg.displayName = 'proto.sm64js.Sm64JsMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.MarioListMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sm64js.MarioListMsg.repeatedFields_, null);
};
goog.inherits(proto.sm64js.MarioListMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.MarioListMsg.displayName = 'proto.sm64js.MarioListMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.InitializationMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sm64js.InitializationMsg.oneofGroups_);
};
goog.inherits(proto.sm64js.InitializationMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.InitializationMsg.displayName = 'proto.sm64js.InitializationMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.AccessCodeMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sm64js.AccessCodeMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.AccessCodeMsg.displayName = 'proto.sm64js.AccessCodeMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.AuthorizedUserMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sm64js.AuthorizedUserMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.AuthorizedUserMsg.displayName = 'proto.sm64js.AuthorizedUserMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.JoinGameMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sm64js.JoinGameMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.JoinGameMsg.displayName = 'proto.sm64js.JoinGameMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.InitGameDataMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sm64js.InitGameDataMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.InitGameDataMsg.displayName = 'proto.sm64js.InitGameDataMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.RequestCosmeticsMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sm64js.RequestCosmeticsMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.RequestCosmeticsMsg.displayName = 'proto.sm64js.RequestCosmeticsMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.PingMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sm64js.PingMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.PingMsg.displayName = 'proto.sm64js.PingMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.FlagMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sm64js.FlagMsg.repeatedFields_, null);
};
goog.inherits(proto.sm64js.FlagMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.FlagMsg.displayName = 'proto.sm64js.FlagMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.GrabFlagMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sm64js.GrabFlagMsg.repeatedFields_, null);
};
goog.inherits(proto.sm64js.GrabFlagMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.GrabFlagMsg.displayName = 'proto.sm64js.GrabFlagMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.AttackMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sm64js.AttackMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.AttackMsg.displayName = 'proto.sm64js.AttackMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.MarioMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sm64js.MarioMsg.repeatedFields_, null);
};
goog.inherits(proto.sm64js.MarioMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.MarioMsg.displayName = 'proto.sm64js.MarioMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.ControllerMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sm64js.ControllerMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.ControllerMsg.displayName = 'proto.sm64js.ControllerMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.PlayerListsMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sm64js.PlayerListsMsg.repeatedFields_, null);
};
goog.inherits(proto.sm64js.PlayerListsMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.PlayerListsMsg.displayName = 'proto.sm64js.PlayerListsMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.ValidPlayersMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sm64js.ValidPlayersMsg.repeatedFields_, null);
};
goog.inherits(proto.sm64js.ValidPlayersMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.ValidPlayersMsg.displayName = 'proto.sm64js.ValidPlayersMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.ChatMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sm64js.ChatMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.ChatMsg.displayName = 'proto.sm64js.ChatMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.SkinMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sm64js.SkinMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.SkinMsg.displayName = 'proto.sm64js.SkinMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.SkinData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sm64js.SkinData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.SkinData.displayName = 'proto.sm64js.SkinData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.SkinValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sm64js.SkinValue.oneofGroups_);
};
goog.inherits(proto.sm64js.SkinValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.SkinValue.displayName = 'proto.sm64js.SkinValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sm64js.AnnouncementMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sm64js.AnnouncementMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sm64js.AnnouncementMsg.displayName = 'proto.sm64js.AnnouncementMsg';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sm64js.RootMsg.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.sm64js.RootMsg.MessageCase = {
  MESSAGE_NOT_SET: 0,
  UNCOMPRESSED_SM64JS_MSG: 1,
  COMPRESSED_SM64JS_MSG: 2
};

/**
 * @return {proto.sm64js.RootMsg.MessageCase}
 */
proto.sm64js.RootMsg.prototype.getMessageCase = function() {
  return /** @type {proto.sm64js.RootMsg.MessageCase} */(jspb.Message.computeOneofCase(this, proto.sm64js.RootMsg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.RootMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.RootMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.RootMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.RootMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    uncompressedSm64jsMsg: (f = msg.getUncompressedSm64jsMsg()) && proto.sm64js.Sm64JsMsg.toObject(includeInstance, f),
    compressedSm64jsMsg: msg.getCompressedSm64jsMsg_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.RootMsg}
 */
proto.sm64js.RootMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.RootMsg;
  return proto.sm64js.RootMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.RootMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.RootMsg}
 */
proto.sm64js.RootMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sm64js.Sm64JsMsg;
      reader.readMessage(value,proto.sm64js.Sm64JsMsg.deserializeBinaryFromReader);
      msg.setUncompressedSm64jsMsg(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCompressedSm64jsMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.RootMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.RootMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.RootMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.RootMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUncompressedSm64jsMsg();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sm64js.Sm64JsMsg.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional Sm64JsMsg uncompressed_sm64js_msg = 1;
 * @return {?proto.sm64js.Sm64JsMsg}
 */
proto.sm64js.RootMsg.prototype.getUncompressedSm64jsMsg = function() {
  return /** @type{?proto.sm64js.Sm64JsMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.Sm64JsMsg, 1));
};


/**
 * @param {?proto.sm64js.Sm64JsMsg|undefined} value
 * @return {!proto.sm64js.RootMsg} returns this
*/
proto.sm64js.RootMsg.prototype.setUncompressedSm64jsMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.sm64js.RootMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.RootMsg} returns this
 */
proto.sm64js.RootMsg.prototype.clearUncompressedSm64jsMsg = function() {
  return this.setUncompressedSm64jsMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.RootMsg.prototype.hasUncompressedSm64jsMsg = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes compressed_sm64js_msg = 2;
 * @return {!(string|Uint8Array)}
 */
proto.sm64js.RootMsg.prototype.getCompressedSm64jsMsg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes compressed_sm64js_msg = 2;
 * This is a type-conversion wrapper around `getCompressedSm64jsMsg()`
 * @return {string}
 */
proto.sm64js.RootMsg.prototype.getCompressedSm64jsMsg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCompressedSm64jsMsg()));
};


/**
 * optional bytes compressed_sm64js_msg = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCompressedSm64jsMsg()`
 * @return {!Uint8Array}
 */
proto.sm64js.RootMsg.prototype.getCompressedSm64jsMsg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCompressedSm64jsMsg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.sm64js.RootMsg} returns this
 */
proto.sm64js.RootMsg.prototype.setCompressedSm64jsMsg = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.sm64js.RootMsg.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sm64js.RootMsg} returns this
 */
proto.sm64js.RootMsg.prototype.clearCompressedSm64jsMsg = function() {
  return jspb.Message.setOneofField(this, 2, proto.sm64js.RootMsg.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.RootMsg.prototype.hasCompressedSm64jsMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sm64js.Sm64JsMsg.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.sm64js.Sm64JsMsg.MessageCase = {
  MESSAGE_NOT_SET: 0,
  INITIALIZATION_MSG: 1,
  LIST_MSG: 2,
  PING_MSG: 3,
  MARIO_MSG: 4,
  PLAYER_LISTS_MSG: 5,
  ATTACK_MSG: 6,
  GRAB_MSG: 7,
  CHAT_MSG: 8,
  SKIN_MSG: 9,
  ANNOUNCEMENT_MSG: 10
};

/**
 * @return {proto.sm64js.Sm64JsMsg.MessageCase}
 */
proto.sm64js.Sm64JsMsg.prototype.getMessageCase = function() {
  return /** @type {proto.sm64js.Sm64JsMsg.MessageCase} */(jspb.Message.computeOneofCase(this, proto.sm64js.Sm64JsMsg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.Sm64JsMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.Sm64JsMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.Sm64JsMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.Sm64JsMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    initializationMsg: (f = msg.getInitializationMsg()) && proto.sm64js.InitializationMsg.toObject(includeInstance, f),
    listMsg: (f = msg.getListMsg()) && proto.sm64js.MarioListMsg.toObject(includeInstance, f),
    pingMsg: (f = msg.getPingMsg()) && proto.sm64js.PingMsg.toObject(includeInstance, f),
    marioMsg: (f = msg.getMarioMsg()) && proto.sm64js.MarioMsg.toObject(includeInstance, f),
    playerListsMsg: (f = msg.getPlayerListsMsg()) && proto.sm64js.PlayerListsMsg.toObject(includeInstance, f),
    attackMsg: (f = msg.getAttackMsg()) && proto.sm64js.AttackMsg.toObject(includeInstance, f),
    grabMsg: (f = msg.getGrabMsg()) && proto.sm64js.GrabFlagMsg.toObject(includeInstance, f),
    chatMsg: (f = msg.getChatMsg()) && proto.sm64js.ChatMsg.toObject(includeInstance, f),
    skinMsg: (f = msg.getSkinMsg()) && proto.sm64js.SkinMsg.toObject(includeInstance, f),
    announcementMsg: (f = msg.getAnnouncementMsg()) && proto.sm64js.AnnouncementMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.Sm64JsMsg}
 */
proto.sm64js.Sm64JsMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.Sm64JsMsg;
  return proto.sm64js.Sm64JsMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.Sm64JsMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.Sm64JsMsg}
 */
proto.sm64js.Sm64JsMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sm64js.InitializationMsg;
      reader.readMessage(value,proto.sm64js.InitializationMsg.deserializeBinaryFromReader);
      msg.setInitializationMsg(value);
      break;
    case 2:
      var value = new proto.sm64js.MarioListMsg;
      reader.readMessage(value,proto.sm64js.MarioListMsg.deserializeBinaryFromReader);
      msg.setListMsg(value);
      break;
    case 3:
      var value = new proto.sm64js.PingMsg;
      reader.readMessage(value,proto.sm64js.PingMsg.deserializeBinaryFromReader);
      msg.setPingMsg(value);
      break;
    case 4:
      var value = new proto.sm64js.MarioMsg;
      reader.readMessage(value,proto.sm64js.MarioMsg.deserializeBinaryFromReader);
      msg.setMarioMsg(value);
      break;
    case 5:
      var value = new proto.sm64js.PlayerListsMsg;
      reader.readMessage(value,proto.sm64js.PlayerListsMsg.deserializeBinaryFromReader);
      msg.setPlayerListsMsg(value);
      break;
    case 6:
      var value = new proto.sm64js.AttackMsg;
      reader.readMessage(value,proto.sm64js.AttackMsg.deserializeBinaryFromReader);
      msg.setAttackMsg(value);
      break;
    case 7:
      var value = new proto.sm64js.GrabFlagMsg;
      reader.readMessage(value,proto.sm64js.GrabFlagMsg.deserializeBinaryFromReader);
      msg.setGrabMsg(value);
      break;
    case 8:
      var value = new proto.sm64js.ChatMsg;
      reader.readMessage(value,proto.sm64js.ChatMsg.deserializeBinaryFromReader);
      msg.setChatMsg(value);
      break;
    case 9:
      var value = new proto.sm64js.SkinMsg;
      reader.readMessage(value,proto.sm64js.SkinMsg.deserializeBinaryFromReader);
      msg.setSkinMsg(value);
      break;
    case 10:
      var value = new proto.sm64js.AnnouncementMsg;
      reader.readMessage(value,proto.sm64js.AnnouncementMsg.deserializeBinaryFromReader);
      msg.setAnnouncementMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.Sm64JsMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.Sm64JsMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.Sm64JsMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.Sm64JsMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitializationMsg();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sm64js.InitializationMsg.serializeBinaryToWriter
    );
  }
  f = message.getListMsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sm64js.MarioListMsg.serializeBinaryToWriter
    );
  }
  f = message.getPingMsg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sm64js.PingMsg.serializeBinaryToWriter
    );
  }
  f = message.getMarioMsg();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sm64js.MarioMsg.serializeBinaryToWriter
    );
  }
  f = message.getPlayerListsMsg();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sm64js.PlayerListsMsg.serializeBinaryToWriter
    );
  }
  f = message.getAttackMsg();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sm64js.AttackMsg.serializeBinaryToWriter
    );
  }
  f = message.getGrabMsg();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.sm64js.GrabFlagMsg.serializeBinaryToWriter
    );
  }
  f = message.getChatMsg();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.sm64js.ChatMsg.serializeBinaryToWriter
    );
  }
  f = message.getSkinMsg();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.sm64js.SkinMsg.serializeBinaryToWriter
    );
  }
  f = message.getAnnouncementMsg();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.sm64js.AnnouncementMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional InitializationMsg initialization_msg = 1;
 * @return {?proto.sm64js.InitializationMsg}
 */
proto.sm64js.Sm64JsMsg.prototype.getInitializationMsg = function() {
  return /** @type{?proto.sm64js.InitializationMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.InitializationMsg, 1));
};


/**
 * @param {?proto.sm64js.InitializationMsg|undefined} value
 * @return {!proto.sm64js.Sm64JsMsg} returns this
*/
proto.sm64js.Sm64JsMsg.prototype.setInitializationMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.sm64js.Sm64JsMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.Sm64JsMsg} returns this
 */
proto.sm64js.Sm64JsMsg.prototype.clearInitializationMsg = function() {
  return this.setInitializationMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.Sm64JsMsg.prototype.hasInitializationMsg = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MarioListMsg list_msg = 2;
 * @return {?proto.sm64js.MarioListMsg}
 */
proto.sm64js.Sm64JsMsg.prototype.getListMsg = function() {
  return /** @type{?proto.sm64js.MarioListMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.MarioListMsg, 2));
};


/**
 * @param {?proto.sm64js.MarioListMsg|undefined} value
 * @return {!proto.sm64js.Sm64JsMsg} returns this
*/
proto.sm64js.Sm64JsMsg.prototype.setListMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sm64js.Sm64JsMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.Sm64JsMsg} returns this
 */
proto.sm64js.Sm64JsMsg.prototype.clearListMsg = function() {
  return this.setListMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.Sm64JsMsg.prototype.hasListMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PingMsg ping_msg = 3;
 * @return {?proto.sm64js.PingMsg}
 */
proto.sm64js.Sm64JsMsg.prototype.getPingMsg = function() {
  return /** @type{?proto.sm64js.PingMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.PingMsg, 3));
};


/**
 * @param {?proto.sm64js.PingMsg|undefined} value
 * @return {!proto.sm64js.Sm64JsMsg} returns this
*/
proto.sm64js.Sm64JsMsg.prototype.setPingMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sm64js.Sm64JsMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.Sm64JsMsg} returns this
 */
proto.sm64js.Sm64JsMsg.prototype.clearPingMsg = function() {
  return this.setPingMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.Sm64JsMsg.prototype.hasPingMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MarioMsg mario_msg = 4;
 * @return {?proto.sm64js.MarioMsg}
 */
proto.sm64js.Sm64JsMsg.prototype.getMarioMsg = function() {
  return /** @type{?proto.sm64js.MarioMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.MarioMsg, 4));
};


/**
 * @param {?proto.sm64js.MarioMsg|undefined} value
 * @return {!proto.sm64js.Sm64JsMsg} returns this
*/
proto.sm64js.Sm64JsMsg.prototype.setMarioMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.sm64js.Sm64JsMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.Sm64JsMsg} returns this
 */
proto.sm64js.Sm64JsMsg.prototype.clearMarioMsg = function() {
  return this.setMarioMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.Sm64JsMsg.prototype.hasMarioMsg = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PlayerListsMsg player_lists_msg = 5;
 * @return {?proto.sm64js.PlayerListsMsg}
 */
proto.sm64js.Sm64JsMsg.prototype.getPlayerListsMsg = function() {
  return /** @type{?proto.sm64js.PlayerListsMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.PlayerListsMsg, 5));
};


/**
 * @param {?proto.sm64js.PlayerListsMsg|undefined} value
 * @return {!proto.sm64js.Sm64JsMsg} returns this
*/
proto.sm64js.Sm64JsMsg.prototype.setPlayerListsMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.sm64js.Sm64JsMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.Sm64JsMsg} returns this
 */
proto.sm64js.Sm64JsMsg.prototype.clearPlayerListsMsg = function() {
  return this.setPlayerListsMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.Sm64JsMsg.prototype.hasPlayerListsMsg = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AttackMsg attack_msg = 6;
 * @return {?proto.sm64js.AttackMsg}
 */
proto.sm64js.Sm64JsMsg.prototype.getAttackMsg = function() {
  return /** @type{?proto.sm64js.AttackMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.AttackMsg, 6));
};


/**
 * @param {?proto.sm64js.AttackMsg|undefined} value
 * @return {!proto.sm64js.Sm64JsMsg} returns this
*/
proto.sm64js.Sm64JsMsg.prototype.setAttackMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.sm64js.Sm64JsMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.Sm64JsMsg} returns this
 */
proto.sm64js.Sm64JsMsg.prototype.clearAttackMsg = function() {
  return this.setAttackMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.Sm64JsMsg.prototype.hasAttackMsg = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional GrabFlagMsg grab_msg = 7;
 * @return {?proto.sm64js.GrabFlagMsg}
 */
proto.sm64js.Sm64JsMsg.prototype.getGrabMsg = function() {
  return /** @type{?proto.sm64js.GrabFlagMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.GrabFlagMsg, 7));
};


/**
 * @param {?proto.sm64js.GrabFlagMsg|undefined} value
 * @return {!proto.sm64js.Sm64JsMsg} returns this
*/
proto.sm64js.Sm64JsMsg.prototype.setGrabMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.sm64js.Sm64JsMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.Sm64JsMsg} returns this
 */
proto.sm64js.Sm64JsMsg.prototype.clearGrabMsg = function() {
  return this.setGrabMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.Sm64JsMsg.prototype.hasGrabMsg = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ChatMsg chat_msg = 8;
 * @return {?proto.sm64js.ChatMsg}
 */
proto.sm64js.Sm64JsMsg.prototype.getChatMsg = function() {
  return /** @type{?proto.sm64js.ChatMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.ChatMsg, 8));
};


/**
 * @param {?proto.sm64js.ChatMsg|undefined} value
 * @return {!proto.sm64js.Sm64JsMsg} returns this
*/
proto.sm64js.Sm64JsMsg.prototype.setChatMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.sm64js.Sm64JsMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.Sm64JsMsg} returns this
 */
proto.sm64js.Sm64JsMsg.prototype.clearChatMsg = function() {
  return this.setChatMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.Sm64JsMsg.prototype.hasChatMsg = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SkinMsg skin_msg = 9;
 * @return {?proto.sm64js.SkinMsg}
 */
proto.sm64js.Sm64JsMsg.prototype.getSkinMsg = function() {
  return /** @type{?proto.sm64js.SkinMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.SkinMsg, 9));
};


/**
 * @param {?proto.sm64js.SkinMsg|undefined} value
 * @return {!proto.sm64js.Sm64JsMsg} returns this
*/
proto.sm64js.Sm64JsMsg.prototype.setSkinMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.sm64js.Sm64JsMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.Sm64JsMsg} returns this
 */
proto.sm64js.Sm64JsMsg.prototype.clearSkinMsg = function() {
  return this.setSkinMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.Sm64JsMsg.prototype.hasSkinMsg = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional AnnouncementMsg announcement_msg = 10;
 * @return {?proto.sm64js.AnnouncementMsg}
 */
proto.sm64js.Sm64JsMsg.prototype.getAnnouncementMsg = function() {
  return /** @type{?proto.sm64js.AnnouncementMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.AnnouncementMsg, 10));
};


/**
 * @param {?proto.sm64js.AnnouncementMsg|undefined} value
 * @return {!proto.sm64js.Sm64JsMsg} returns this
*/
proto.sm64js.Sm64JsMsg.prototype.setAnnouncementMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.sm64js.Sm64JsMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.Sm64JsMsg} returns this
 */
proto.sm64js.Sm64JsMsg.prototype.clearAnnouncementMsg = function() {
  return this.setAnnouncementMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.Sm64JsMsg.prototype.hasAnnouncementMsg = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sm64js.MarioListMsg.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.MarioListMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.MarioListMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.MarioListMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.MarioListMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    flagList: jspb.Message.toObjectList(msg.getFlagList(),
    proto.sm64js.FlagMsg.toObject, includeInstance),
    marioList: jspb.Message.toObjectList(msg.getMarioList(),
    proto.sm64js.MarioMsg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.MarioListMsg}
 */
proto.sm64js.MarioListMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.MarioListMsg;
  return proto.sm64js.MarioListMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.MarioListMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.MarioListMsg}
 */
proto.sm64js.MarioListMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sm64js.FlagMsg;
      reader.readMessage(value,proto.sm64js.FlagMsg.deserializeBinaryFromReader);
      msg.addFlag(value);
      break;
    case 2:
      var value = new proto.sm64js.MarioMsg;
      reader.readMessage(value,proto.sm64js.MarioMsg.deserializeBinaryFromReader);
      msg.addMario(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.MarioListMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.MarioListMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.MarioListMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.MarioListMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlagList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sm64js.FlagMsg.serializeBinaryToWriter
    );
  }
  f = message.getMarioList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sm64js.MarioMsg.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FlagMsg flag = 1;
 * @return {!Array<!proto.sm64js.FlagMsg>}
 */
proto.sm64js.MarioListMsg.prototype.getFlagList = function() {
  return /** @type{!Array<!proto.sm64js.FlagMsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sm64js.FlagMsg, 1));
};


/**
 * @param {!Array<!proto.sm64js.FlagMsg>} value
 * @return {!proto.sm64js.MarioListMsg} returns this
*/
proto.sm64js.MarioListMsg.prototype.setFlagList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sm64js.FlagMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sm64js.FlagMsg}
 */
proto.sm64js.MarioListMsg.prototype.addFlag = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sm64js.FlagMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sm64js.MarioListMsg} returns this
 */
proto.sm64js.MarioListMsg.prototype.clearFlagList = function() {
  return this.setFlagList([]);
};


/**
 * repeated MarioMsg mario = 2;
 * @return {!Array<!proto.sm64js.MarioMsg>}
 */
proto.sm64js.MarioListMsg.prototype.getMarioList = function() {
  return /** @type{!Array<!proto.sm64js.MarioMsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sm64js.MarioMsg, 2));
};


/**
 * @param {!Array<!proto.sm64js.MarioMsg>} value
 * @return {!proto.sm64js.MarioListMsg} returns this
*/
proto.sm64js.MarioListMsg.prototype.setMarioList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.sm64js.MarioMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sm64js.MarioMsg}
 */
proto.sm64js.MarioListMsg.prototype.addMario = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.sm64js.MarioMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sm64js.MarioListMsg} returns this
 */
proto.sm64js.MarioListMsg.prototype.clearMarioList = function() {
  return this.setMarioList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sm64js.InitializationMsg.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.sm64js.InitializationMsg.MessageCase = {
  MESSAGE_NOT_SET: 0,
  ACCESS_CODE_MSG: 1,
  AUTHORIZED_USER_MSG: 2,
  JOIN_GAME_MSG: 3,
  INIT_GAME_DATA_MSG: 4,
  REQUEST_COSMETICS_MSG: 5
};

/**
 * @return {proto.sm64js.InitializationMsg.MessageCase}
 */
proto.sm64js.InitializationMsg.prototype.getMessageCase = function() {
  return /** @type {proto.sm64js.InitializationMsg.MessageCase} */(jspb.Message.computeOneofCase(this, proto.sm64js.InitializationMsg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.InitializationMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.InitializationMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.InitializationMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.InitializationMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessCodeMsg: (f = msg.getAccessCodeMsg()) && proto.sm64js.AccessCodeMsg.toObject(includeInstance, f),
    authorizedUserMsg: (f = msg.getAuthorizedUserMsg()) && proto.sm64js.AuthorizedUserMsg.toObject(includeInstance, f),
    joinGameMsg: (f = msg.getJoinGameMsg()) && proto.sm64js.JoinGameMsg.toObject(includeInstance, f),
    initGameDataMsg: (f = msg.getInitGameDataMsg()) && proto.sm64js.InitGameDataMsg.toObject(includeInstance, f),
    requestCosmeticsMsg: (f = msg.getRequestCosmeticsMsg()) && proto.sm64js.RequestCosmeticsMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.InitializationMsg}
 */
proto.sm64js.InitializationMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.InitializationMsg;
  return proto.sm64js.InitializationMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.InitializationMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.InitializationMsg}
 */
proto.sm64js.InitializationMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sm64js.AccessCodeMsg;
      reader.readMessage(value,proto.sm64js.AccessCodeMsg.deserializeBinaryFromReader);
      msg.setAccessCodeMsg(value);
      break;
    case 2:
      var value = new proto.sm64js.AuthorizedUserMsg;
      reader.readMessage(value,proto.sm64js.AuthorizedUserMsg.deserializeBinaryFromReader);
      msg.setAuthorizedUserMsg(value);
      break;
    case 3:
      var value = new proto.sm64js.JoinGameMsg;
      reader.readMessage(value,proto.sm64js.JoinGameMsg.deserializeBinaryFromReader);
      msg.setJoinGameMsg(value);
      break;
    case 4:
      var value = new proto.sm64js.InitGameDataMsg;
      reader.readMessage(value,proto.sm64js.InitGameDataMsg.deserializeBinaryFromReader);
      msg.setInitGameDataMsg(value);
      break;
    case 5:
      var value = new proto.sm64js.RequestCosmeticsMsg;
      reader.readMessage(value,proto.sm64js.RequestCosmeticsMsg.deserializeBinaryFromReader);
      msg.setRequestCosmeticsMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.InitializationMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.InitializationMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.InitializationMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.InitializationMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessCodeMsg();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sm64js.AccessCodeMsg.serializeBinaryToWriter
    );
  }
  f = message.getAuthorizedUserMsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sm64js.AuthorizedUserMsg.serializeBinaryToWriter
    );
  }
  f = message.getJoinGameMsg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sm64js.JoinGameMsg.serializeBinaryToWriter
    );
  }
  f = message.getInitGameDataMsg();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sm64js.InitGameDataMsg.serializeBinaryToWriter
    );
  }
  f = message.getRequestCosmeticsMsg();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sm64js.RequestCosmeticsMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccessCodeMsg access_code_msg = 1;
 * @return {?proto.sm64js.AccessCodeMsg}
 */
proto.sm64js.InitializationMsg.prototype.getAccessCodeMsg = function() {
  return /** @type{?proto.sm64js.AccessCodeMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.AccessCodeMsg, 1));
};


/**
 * @param {?proto.sm64js.AccessCodeMsg|undefined} value
 * @return {!proto.sm64js.InitializationMsg} returns this
*/
proto.sm64js.InitializationMsg.prototype.setAccessCodeMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.sm64js.InitializationMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.InitializationMsg} returns this
 */
proto.sm64js.InitializationMsg.prototype.clearAccessCodeMsg = function() {
  return this.setAccessCodeMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.InitializationMsg.prototype.hasAccessCodeMsg = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AuthorizedUserMsg authorized_user_msg = 2;
 * @return {?proto.sm64js.AuthorizedUserMsg}
 */
proto.sm64js.InitializationMsg.prototype.getAuthorizedUserMsg = function() {
  return /** @type{?proto.sm64js.AuthorizedUserMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.AuthorizedUserMsg, 2));
};


/**
 * @param {?proto.sm64js.AuthorizedUserMsg|undefined} value
 * @return {!proto.sm64js.InitializationMsg} returns this
*/
proto.sm64js.InitializationMsg.prototype.setAuthorizedUserMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sm64js.InitializationMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.InitializationMsg} returns this
 */
proto.sm64js.InitializationMsg.prototype.clearAuthorizedUserMsg = function() {
  return this.setAuthorizedUserMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.InitializationMsg.prototype.hasAuthorizedUserMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional JoinGameMsg join_game_msg = 3;
 * @return {?proto.sm64js.JoinGameMsg}
 */
proto.sm64js.InitializationMsg.prototype.getJoinGameMsg = function() {
  return /** @type{?proto.sm64js.JoinGameMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.JoinGameMsg, 3));
};


/**
 * @param {?proto.sm64js.JoinGameMsg|undefined} value
 * @return {!proto.sm64js.InitializationMsg} returns this
*/
proto.sm64js.InitializationMsg.prototype.setJoinGameMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sm64js.InitializationMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.InitializationMsg} returns this
 */
proto.sm64js.InitializationMsg.prototype.clearJoinGameMsg = function() {
  return this.setJoinGameMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.InitializationMsg.prototype.hasJoinGameMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional InitGameDataMsg init_game_data_msg = 4;
 * @return {?proto.sm64js.InitGameDataMsg}
 */
proto.sm64js.InitializationMsg.prototype.getInitGameDataMsg = function() {
  return /** @type{?proto.sm64js.InitGameDataMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.InitGameDataMsg, 4));
};


/**
 * @param {?proto.sm64js.InitGameDataMsg|undefined} value
 * @return {!proto.sm64js.InitializationMsg} returns this
*/
proto.sm64js.InitializationMsg.prototype.setInitGameDataMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.sm64js.InitializationMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.InitializationMsg} returns this
 */
proto.sm64js.InitializationMsg.prototype.clearInitGameDataMsg = function() {
  return this.setInitGameDataMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.InitializationMsg.prototype.hasInitGameDataMsg = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RequestCosmeticsMsg request_cosmetics_msg = 5;
 * @return {?proto.sm64js.RequestCosmeticsMsg}
 */
proto.sm64js.InitializationMsg.prototype.getRequestCosmeticsMsg = function() {
  return /** @type{?proto.sm64js.RequestCosmeticsMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.RequestCosmeticsMsg, 5));
};


/**
 * @param {?proto.sm64js.RequestCosmeticsMsg|undefined} value
 * @return {!proto.sm64js.InitializationMsg} returns this
*/
proto.sm64js.InitializationMsg.prototype.setRequestCosmeticsMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.sm64js.InitializationMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.InitializationMsg} returns this
 */
proto.sm64js.InitializationMsg.prototype.clearRequestCosmeticsMsg = function() {
  return this.setRequestCosmeticsMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.InitializationMsg.prototype.hasRequestCosmeticsMsg = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.AccessCodeMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.AccessCodeMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.AccessCodeMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.AccessCodeMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.AccessCodeMsg}
 */
proto.sm64js.AccessCodeMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.AccessCodeMsg;
  return proto.sm64js.AccessCodeMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.AccessCodeMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.AccessCodeMsg}
 */
proto.sm64js.AccessCodeMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.AccessCodeMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.AccessCodeMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.AccessCodeMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.AccessCodeMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string access_code = 1;
 * @return {string}
 */
proto.sm64js.AccessCodeMsg.prototype.getAccessCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sm64js.AccessCodeMsg} returns this
 */
proto.sm64js.AccessCodeMsg.prototype.setAccessCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.sm64js.AccessCodeMsg.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sm64js.AccessCodeMsg} returns this
 */
proto.sm64js.AccessCodeMsg.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.AuthorizedUserMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.AuthorizedUserMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.AuthorizedUserMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.AuthorizedUserMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.AuthorizedUserMsg}
 */
proto.sm64js.AuthorizedUserMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.AuthorizedUserMsg;
  return proto.sm64js.AuthorizedUserMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.AuthorizedUserMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.AuthorizedUserMsg}
 */
proto.sm64js.AuthorizedUserMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.AuthorizedUserMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.AuthorizedUserMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.AuthorizedUserMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.AuthorizedUserMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.sm64js.AuthorizedUserMsg.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sm64js.AuthorizedUserMsg} returns this
 */
proto.sm64js.AuthorizedUserMsg.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 status = 2;
 * @return {number}
 */
proto.sm64js.AuthorizedUserMsg.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.AuthorizedUserMsg} returns this
 */
proto.sm64js.AuthorizedUserMsg.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.sm64js.AuthorizedUserMsg.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sm64js.AuthorizedUserMsg} returns this
 */
proto.sm64js.AuthorizedUserMsg.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.JoinGameMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.JoinGameMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.JoinGameMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.JoinGameMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    useDiscordName: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.JoinGameMsg}
 */
proto.sm64js.JoinGameMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.JoinGameMsg;
  return proto.sm64js.JoinGameMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.JoinGameMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.JoinGameMsg}
 */
proto.sm64js.JoinGameMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseDiscordName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.JoinGameMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.JoinGameMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.JoinGameMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.JoinGameMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUseDiscordName();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.sm64js.JoinGameMsg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sm64js.JoinGameMsg} returns this
 */
proto.sm64js.JoinGameMsg.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 level = 2;
 * @return {number}
 */
proto.sm64js.JoinGameMsg.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.JoinGameMsg} returns this
 */
proto.sm64js.JoinGameMsg.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string game_id = 3;
 * @return {string}
 */
proto.sm64js.JoinGameMsg.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sm64js.JoinGameMsg} returns this
 */
proto.sm64js.JoinGameMsg.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool use_discord_name = 4;
 * @return {boolean}
 */
proto.sm64js.JoinGameMsg.prototype.getUseDiscordName = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sm64js.JoinGameMsg} returns this
 */
proto.sm64js.JoinGameMsg.prototype.setUseDiscordName = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.InitGameDataMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.InitGameDataMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.InitGameDataMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.InitGameDataMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    accepted: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    socketId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.InitGameDataMsg}
 */
proto.sm64js.InitGameDataMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.InitGameDataMsg;
  return proto.sm64js.InitGameDataMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.InitGameDataMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.InitGameDataMsg}
 */
proto.sm64js.InitGameDataMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAccepted(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSocketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.InitGameDataMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.InitGameDataMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.InitGameDataMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.InitGameDataMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAccepted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSocketId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.sm64js.InitGameDataMsg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sm64js.InitGameDataMsg} returns this
 */
proto.sm64js.InitGameDataMsg.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 level = 2;
 * @return {number}
 */
proto.sm64js.InitGameDataMsg.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.InitGameDataMsg} returns this
 */
proto.sm64js.InitGameDataMsg.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool accepted = 3;
 * @return {boolean}
 */
proto.sm64js.InitGameDataMsg.prototype.getAccepted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sm64js.InitGameDataMsg} returns this
 */
proto.sm64js.InitGameDataMsg.prototype.setAccepted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 socket_id = 4;
 * @return {number}
 */
proto.sm64js.InitGameDataMsg.prototype.getSocketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.InitGameDataMsg} returns this
 */
proto.sm64js.InitGameDataMsg.prototype.setSocketId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.RequestCosmeticsMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.RequestCosmeticsMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.RequestCosmeticsMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.RequestCosmeticsMsg.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.RequestCosmeticsMsg}
 */
proto.sm64js.RequestCosmeticsMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.RequestCosmeticsMsg;
  return proto.sm64js.RequestCosmeticsMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.RequestCosmeticsMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.RequestCosmeticsMsg}
 */
proto.sm64js.RequestCosmeticsMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.RequestCosmeticsMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.RequestCosmeticsMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.RequestCosmeticsMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.RequestCosmeticsMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.PingMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.PingMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.PingMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.PingMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.PingMsg}
 */
proto.sm64js.PingMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.PingMsg;
  return proto.sm64js.PingMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.PingMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.PingMsg}
 */
proto.sm64js.PingMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.PingMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.PingMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.PingMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.PingMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float time = 1;
 * @return {number}
 */
proto.sm64js.PingMsg.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.PingMsg} returns this
 */
proto.sm64js.PingMsg.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sm64js.FlagMsg.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.FlagMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.FlagMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.FlagMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.FlagMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    posList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    linkedtoplayer: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    socketid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    heightBeforeFall: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.FlagMsg}
 */
proto.sm64js.FlagMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.FlagMsg;
  return proto.sm64js.FlagMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.FlagMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.FlagMsg}
 */
proto.sm64js.FlagMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setPosList(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLinkedtoplayer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSocketid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeightBeforeFall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.FlagMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.FlagMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.FlagMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.FlagMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getLinkedtoplayer();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSocketid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHeightBeforeFall();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * repeated float pos = 1;
 * @return {!Array<number>}
 */
proto.sm64js.FlagMsg.prototype.getPosList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.sm64js.FlagMsg} returns this
 */
proto.sm64js.FlagMsg.prototype.setPosList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.sm64js.FlagMsg} returns this
 */
proto.sm64js.FlagMsg.prototype.addPos = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sm64js.FlagMsg} returns this
 */
proto.sm64js.FlagMsg.prototype.clearPosList = function() {
  return this.setPosList([]);
};


/**
 * optional bool linkedToPlayer = 2;
 * @return {boolean}
 */
proto.sm64js.FlagMsg.prototype.getLinkedtoplayer = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sm64js.FlagMsg} returns this
 */
proto.sm64js.FlagMsg.prototype.setLinkedtoplayer = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 socketID = 3;
 * @return {number}
 */
proto.sm64js.FlagMsg.prototype.getSocketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.FlagMsg} returns this
 */
proto.sm64js.FlagMsg.prototype.setSocketid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float height_before_fall = 4;
 * @return {number}
 */
proto.sm64js.FlagMsg.prototype.getHeightBeforeFall = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.FlagMsg} returns this
 */
proto.sm64js.FlagMsg.prototype.setHeightBeforeFall = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sm64js.GrabFlagMsg.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.GrabFlagMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.GrabFlagMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.GrabFlagMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.GrabFlagMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    posList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    flagId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.GrabFlagMsg}
 */
proto.sm64js.GrabFlagMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.GrabFlagMsg;
  return proto.sm64js.GrabFlagMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.GrabFlagMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.GrabFlagMsg}
 */
proto.sm64js.GrabFlagMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setPosList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlagId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.GrabFlagMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.GrabFlagMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.GrabFlagMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.GrabFlagMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getFlagId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated float pos = 1;
 * @return {!Array<number>}
 */
proto.sm64js.GrabFlagMsg.prototype.getPosList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.sm64js.GrabFlagMsg} returns this
 */
proto.sm64js.GrabFlagMsg.prototype.setPosList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.sm64js.GrabFlagMsg} returns this
 */
proto.sm64js.GrabFlagMsg.prototype.addPos = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sm64js.GrabFlagMsg} returns this
 */
proto.sm64js.GrabFlagMsg.prototype.clearPosList = function() {
  return this.setPosList([]);
};


/**
 * optional uint32 flag_id = 2;
 * @return {number}
 */
proto.sm64js.GrabFlagMsg.prototype.getFlagId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.GrabFlagMsg} returns this
 */
proto.sm64js.GrabFlagMsg.prototype.setFlagId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.AttackMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.AttackMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.AttackMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.AttackMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetSocketId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    attackerSocketId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    flagId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.AttackMsg}
 */
proto.sm64js.AttackMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.AttackMsg;
  return proto.sm64js.AttackMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.AttackMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.AttackMsg}
 */
proto.sm64js.AttackMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetSocketId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAttackerSocketId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlagId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.AttackMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.AttackMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.AttackMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.AttackMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetSocketId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAttackerSocketId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFlagId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 target_socket_id = 1;
 * @return {number}
 */
proto.sm64js.AttackMsg.prototype.getTargetSocketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.AttackMsg} returns this
 */
proto.sm64js.AttackMsg.prototype.setTargetSocketId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 attacker_socket_id = 2;
 * @return {number}
 */
proto.sm64js.AttackMsg.prototype.getAttackerSocketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.AttackMsg} returns this
 */
proto.sm64js.AttackMsg.prototype.setAttackerSocketId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 flag_id = 3;
 * @return {number}
 */
proto.sm64js.AttackMsg.prototype.getFlagId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.AttackMsg} returns this
 */
proto.sm64js.AttackMsg.prototype.setFlagId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sm64js.MarioMsg.repeatedFields_ = [13,14,15,16,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.MarioMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.MarioMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.MarioMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.MarioMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    controller: (f = msg.getController()) && proto.sm64js.ControllerMsg.toObject(includeInstance, f),
    action: jspb.Message.getFieldWithDefault(msg, 3, 0),
    prevaction: jspb.Message.getFieldWithDefault(msg, 4, 0),
    actionstate: jspb.Message.getFieldWithDefault(msg, 5, 0),
    actiontimer: jspb.Message.getFieldWithDefault(msg, 6, 0),
    actionarg: jspb.Message.getFieldWithDefault(msg, 7, 0),
    invinctimer: jspb.Message.getFieldWithDefault(msg, 8, 0),
    framessincea: jspb.Message.getFieldWithDefault(msg, 9, 0),
    framessinceb: jspb.Message.getFieldWithDefault(msg, 10, 0),
    wallkicktimer: jspb.Message.getFieldWithDefault(msg, 11, 0),
    doublejumptimer: jspb.Message.getFieldWithDefault(msg, 12, 0),
    faceangleList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    anglevelList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    posList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 15)) == null ? undefined : f,
    velList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 16)) == null ? undefined : f,
    forwardvel: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    rawdataList: (f = jspb.Message.getRepeatedField(msg, 18)) == null ? undefined : f,
    usedobjid: jspb.Message.getFieldWithDefault(msg, 19, 0),
    socketid: jspb.Message.getFieldWithDefault(msg, 20, 0),
    parachuting: jspb.Message.getBooleanFieldWithDefault(msg, 21, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.MarioMsg}
 */
proto.sm64js.MarioMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.MarioMsg;
  return proto.sm64js.MarioMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.MarioMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.MarioMsg}
 */
proto.sm64js.MarioMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sm64js.ControllerMsg;
      reader.readMessage(value,proto.sm64js.ControllerMsg.deserializeBinaryFromReader);
      msg.setController(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAction(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrevaction(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionstate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActiontimer(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionarg(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setInvinctimer(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFramessincea(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFramessinceb(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWallkicktimer(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDoublejumptimer(value);
      break;
    case 13:
      var value = /** @type {!Array<number>} */ (reader.readPackedSint32());
      msg.setFaceangleList(value);
      break;
    case 14:
      var value = /** @type {!Array<number>} */ (reader.readPackedSint32());
      msg.setAnglevelList(value);
      break;
    case 15:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setPosList(value);
      break;
    case 16:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setVelList(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setForwardvel(value);
      break;
    case 18:
      var value = /** @type {!Array<number>} */ (reader.readPackedSint32());
      msg.setRawdataList(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUsedobjid(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSocketid(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParachuting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.MarioMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.MarioMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.MarioMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.MarioMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getController();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sm64js.ControllerMsg.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPrevaction();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getActionstate();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getActiontimer();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getActionarg();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getInvinctimer();
  if (f !== 0) {
    writer.writeSint32(
      8,
      f
    );
  }
  f = message.getFramessincea();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getFramessinceb();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getWallkicktimer();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getDoublejumptimer();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getFaceangleList();
  if (f.length > 0) {
    writer.writePackedSint32(
      13,
      f
    );
  }
  f = message.getAnglevelList();
  if (f.length > 0) {
    writer.writePackedSint32(
      14,
      f
    );
  }
  f = message.getPosList();
  if (f.length > 0) {
    writer.writePackedFloat(
      15,
      f
    );
  }
  f = message.getVelList();
  if (f.length > 0) {
    writer.writePackedFloat(
      16,
      f
    );
  }
  f = message.getForwardvel();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = message.getRawdataList();
  if (f.length > 0) {
    writer.writePackedSint32(
      18,
      f
    );
  }
  f = message.getUsedobjid();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getSocketid();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = message.getParachuting();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
};


/**
 * optional ControllerMsg controller = 1;
 * @return {?proto.sm64js.ControllerMsg}
 */
proto.sm64js.MarioMsg.prototype.getController = function() {
  return /** @type{?proto.sm64js.ControllerMsg} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.ControllerMsg, 1));
};


/**
 * @param {?proto.sm64js.ControllerMsg|undefined} value
 * @return {!proto.sm64js.MarioMsg} returns this
*/
proto.sm64js.MarioMsg.prototype.setController = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.clearController = function() {
  return this.setController(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.MarioMsg.prototype.hasController = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 action = 3;
 * @return {number}
 */
proto.sm64js.MarioMsg.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setAction = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 prevAction = 4;
 * @return {number}
 */
proto.sm64js.MarioMsg.prototype.getPrevaction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setPrevaction = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 actionState = 5;
 * @return {number}
 */
proto.sm64js.MarioMsg.prototype.getActionstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setActionstate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 actionTimer = 6;
 * @return {number}
 */
proto.sm64js.MarioMsg.prototype.getActiontimer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setActiontimer = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 actionArg = 7;
 * @return {number}
 */
proto.sm64js.MarioMsg.prototype.getActionarg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setActionarg = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional sint32 invincTimer = 8;
 * @return {number}
 */
proto.sm64js.MarioMsg.prototype.getInvinctimer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setInvinctimer = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 framesSinceA = 9;
 * @return {number}
 */
proto.sm64js.MarioMsg.prototype.getFramessincea = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setFramessincea = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 framesSinceB = 10;
 * @return {number}
 */
proto.sm64js.MarioMsg.prototype.getFramessinceb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setFramessinceb = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 wallKickTimer = 11;
 * @return {number}
 */
proto.sm64js.MarioMsg.prototype.getWallkicktimer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setWallkicktimer = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint32 doubleJumpTimer = 12;
 * @return {number}
 */
proto.sm64js.MarioMsg.prototype.getDoublejumptimer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setDoublejumptimer = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * repeated sint32 faceAngle = 13;
 * @return {!Array<number>}
 */
proto.sm64js.MarioMsg.prototype.getFaceangleList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setFaceangleList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.addFaceangle = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.clearFaceangleList = function() {
  return this.setFaceangleList([]);
};


/**
 * repeated sint32 angleVel = 14;
 * @return {!Array<number>}
 */
proto.sm64js.MarioMsg.prototype.getAnglevelList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setAnglevelList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.addAnglevel = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.clearAnglevelList = function() {
  return this.setAnglevelList([]);
};


/**
 * repeated float pos = 15;
 * @return {!Array<number>}
 */
proto.sm64js.MarioMsg.prototype.getPosList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 15));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setPosList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.addPos = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.clearPosList = function() {
  return this.setPosList([]);
};


/**
 * repeated float vel = 16;
 * @return {!Array<number>}
 */
proto.sm64js.MarioMsg.prototype.getVelList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 16));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setVelList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.addVel = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.clearVelList = function() {
  return this.setVelList([]);
};


/**
 * optional float forwardVel = 17;
 * @return {number}
 */
proto.sm64js.MarioMsg.prototype.getForwardvel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setForwardvel = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * repeated sint32 rawData = 18;
 * @return {!Array<number>}
 */
proto.sm64js.MarioMsg.prototype.getRawdataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 18));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setRawdataList = function(value) {
  return jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.addRawdata = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.clearRawdataList = function() {
  return this.setRawdataList([]);
};


/**
 * optional uint32 usedObjID = 19;
 * @return {number}
 */
proto.sm64js.MarioMsg.prototype.getUsedobjid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setUsedobjid = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional uint32 socketID = 20;
 * @return {number}
 */
proto.sm64js.MarioMsg.prototype.getSocketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setSocketid = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional bool parachuting = 21;
 * @return {boolean}
 */
proto.sm64js.MarioMsg.prototype.getParachuting = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sm64js.MarioMsg} returns this
 */
proto.sm64js.MarioMsg.prototype.setParachuting = function(value) {
  return jspb.Message.setProto3BooleanField(this, 21, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.ControllerMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.ControllerMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.ControllerMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.ControllerMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    stickx: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    sticky: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    stickmag: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    buttondown: jspb.Message.getFieldWithDefault(msg, 4, 0),
    buttonpressed: jspb.Message.getFieldWithDefault(msg, 5, 0),
    camerayaw: jspb.Message.getFieldWithDefault(msg, 6, 0),
    socketid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.ControllerMsg}
 */
proto.sm64js.ControllerMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.ControllerMsg;
  return proto.sm64js.ControllerMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.ControllerMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.ControllerMsg}
 */
proto.sm64js.ControllerMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStickx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSticky(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStickmag(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setButtondown(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setButtonpressed(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setCamerayaw(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSocketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.ControllerMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.ControllerMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.ControllerMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.ControllerMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStickx();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getSticky();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getStickmag();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getButtondown();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getButtonpressed();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getCamerayaw();
  if (f !== 0) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = message.getSocketid();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional float stickX = 1;
 * @return {number}
 */
proto.sm64js.ControllerMsg.prototype.getStickx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.ControllerMsg} returns this
 */
proto.sm64js.ControllerMsg.prototype.setStickx = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float stickY = 2;
 * @return {number}
 */
proto.sm64js.ControllerMsg.prototype.getSticky = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.ControllerMsg} returns this
 */
proto.sm64js.ControllerMsg.prototype.setSticky = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float stickMag = 3;
 * @return {number}
 */
proto.sm64js.ControllerMsg.prototype.getStickmag = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.ControllerMsg} returns this
 */
proto.sm64js.ControllerMsg.prototype.setStickmag = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional uint32 buttonDown = 4;
 * @return {number}
 */
proto.sm64js.ControllerMsg.prototype.getButtondown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.ControllerMsg} returns this
 */
proto.sm64js.ControllerMsg.prototype.setButtondown = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 buttonPressed = 5;
 * @return {number}
 */
proto.sm64js.ControllerMsg.prototype.getButtonpressed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.ControllerMsg} returns this
 */
proto.sm64js.ControllerMsg.prototype.setButtonpressed = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint32 cameraYaw = 6;
 * @return {number}
 */
proto.sm64js.ControllerMsg.prototype.getCamerayaw = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.ControllerMsg} returns this
 */
proto.sm64js.ControllerMsg.prototype.setCamerayaw = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 socketID = 7;
 * @return {number}
 */
proto.sm64js.ControllerMsg.prototype.getSocketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.ControllerMsg} returns this
 */
proto.sm64js.ControllerMsg.prototype.setSocketid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sm64js.PlayerListsMsg.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.PlayerListsMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.PlayerListsMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.PlayerListsMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.PlayerListsMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameList: jspb.Message.toObjectList(msg.getGameList(),
    proto.sm64js.ValidPlayersMsg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.PlayerListsMsg}
 */
proto.sm64js.PlayerListsMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.PlayerListsMsg;
  return proto.sm64js.PlayerListsMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.PlayerListsMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.PlayerListsMsg}
 */
proto.sm64js.PlayerListsMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sm64js.ValidPlayersMsg;
      reader.readMessage(value,proto.sm64js.ValidPlayersMsg.deserializeBinaryFromReader);
      msg.addGame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.PlayerListsMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.PlayerListsMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.PlayerListsMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.PlayerListsMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sm64js.ValidPlayersMsg.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ValidPlayersMsg game = 1;
 * @return {!Array<!proto.sm64js.ValidPlayersMsg>}
 */
proto.sm64js.PlayerListsMsg.prototype.getGameList = function() {
  return /** @type{!Array<!proto.sm64js.ValidPlayersMsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sm64js.ValidPlayersMsg, 1));
};


/**
 * @param {!Array<!proto.sm64js.ValidPlayersMsg>} value
 * @return {!proto.sm64js.PlayerListsMsg} returns this
*/
proto.sm64js.PlayerListsMsg.prototype.setGameList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sm64js.ValidPlayersMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sm64js.ValidPlayersMsg}
 */
proto.sm64js.PlayerListsMsg.prototype.addGame = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sm64js.ValidPlayersMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sm64js.PlayerListsMsg} returns this
 */
proto.sm64js.PlayerListsMsg.prototype.clearGameList = function() {
  return this.setGameList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sm64js.ValidPlayersMsg.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.ValidPlayersMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.ValidPlayersMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.ValidPlayersMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.ValidPlayersMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    levelId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    validplayersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.ValidPlayersMsg}
 */
proto.sm64js.ValidPlayersMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.ValidPlayersMsg;
  return proto.sm64js.ValidPlayersMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.ValidPlayersMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.ValidPlayersMsg}
 */
proto.sm64js.ValidPlayersMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLevelId(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setValidplayersList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.ValidPlayersMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.ValidPlayersMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.ValidPlayersMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.ValidPlayersMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLevelId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getValidplayersList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 level_id = 1;
 * @return {number}
 */
proto.sm64js.ValidPlayersMsg.prototype.getLevelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.ValidPlayersMsg} returns this
 */
proto.sm64js.ValidPlayersMsg.prototype.setLevelId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated uint32 validPlayers = 2;
 * @return {!Array<number>}
 */
proto.sm64js.ValidPlayersMsg.prototype.getValidplayersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.sm64js.ValidPlayersMsg} returns this
 */
proto.sm64js.ValidPlayersMsg.prototype.setValidplayersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.sm64js.ValidPlayersMsg} returns this
 */
proto.sm64js.ValidPlayersMsg.prototype.addValidplayers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sm64js.ValidPlayersMsg} returns this
 */
proto.sm64js.ValidPlayersMsg.prototype.clearValidplayersList = function() {
  return this.setValidplayersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.ChatMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.ChatMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.ChatMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.ChatMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sender: jspb.Message.getFieldWithDefault(msg, 2, ""),
    socketid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    admintoken: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isadmin: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.ChatMsg}
 */
proto.sm64js.ChatMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.ChatMsg;
  return proto.sm64js.ChatMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.ChatMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.ChatMsg}
 */
proto.sm64js.ChatMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSocketid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdmintoken(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsadmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.ChatMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.ChatMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.ChatMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.ChatMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSocketid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAdmintoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsadmin();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.sm64js.ChatMsg.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sm64js.ChatMsg} returns this
 */
proto.sm64js.ChatMsg.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sender = 2;
 * @return {string}
 */
proto.sm64js.ChatMsg.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sm64js.ChatMsg} returns this
 */
proto.sm64js.ChatMsg.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 socketID = 3;
 * @return {number}
 */
proto.sm64js.ChatMsg.prototype.getSocketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.ChatMsg} returns this
 */
proto.sm64js.ChatMsg.prototype.setSocketid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string adminToken = 4;
 * @return {string}
 */
proto.sm64js.ChatMsg.prototype.getAdmintoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sm64js.ChatMsg} returns this
 */
proto.sm64js.ChatMsg.prototype.setAdmintoken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool isAdmin = 5;
 * @return {boolean}
 */
proto.sm64js.ChatMsg.prototype.getIsadmin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sm64js.ChatMsg} returns this
 */
proto.sm64js.ChatMsg.prototype.setIsadmin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.SkinMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.SkinMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.SkinMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.SkinMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    socketid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    skindata: (f = msg.getSkindata()) && proto.sm64js.SkinData.toObject(includeInstance, f),
    playername: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.SkinMsg}
 */
proto.sm64js.SkinMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.SkinMsg;
  return proto.sm64js.SkinMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.SkinMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.SkinMsg}
 */
proto.sm64js.SkinMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSocketid(value);
      break;
    case 2:
      var value = new proto.sm64js.SkinData;
      reader.readMessage(value,proto.sm64js.SkinData.deserializeBinaryFromReader);
      msg.setSkindata(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.SkinMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.SkinMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.SkinMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.SkinMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSocketid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSkindata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sm64js.SkinData.serializeBinaryToWriter
    );
  }
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 socketID = 1;
 * @return {number}
 */
proto.sm64js.SkinMsg.prototype.getSocketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.SkinMsg} returns this
 */
proto.sm64js.SkinMsg.prototype.setSocketid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SkinData skinData = 2;
 * @return {?proto.sm64js.SkinData}
 */
proto.sm64js.SkinMsg.prototype.getSkindata = function() {
  return /** @type{?proto.sm64js.SkinData} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.SkinData, 2));
};


/**
 * @param {?proto.sm64js.SkinData|undefined} value
 * @return {!proto.sm64js.SkinMsg} returns this
*/
proto.sm64js.SkinMsg.prototype.setSkindata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.SkinMsg} returns this
 */
proto.sm64js.SkinMsg.prototype.clearSkindata = function() {
  return this.setSkindata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.SkinMsg.prototype.hasSkindata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string playerName = 3;
 * @return {string}
 */
proto.sm64js.SkinMsg.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sm64js.SkinMsg} returns this
 */
proto.sm64js.SkinMsg.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.SkinData.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.SkinData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.SkinData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.SkinData.toObject = function(includeInstance, msg) {
  var f, obj = {
    overalls: (f = msg.getOveralls()) && proto.sm64js.SkinValue.toObject(includeInstance, f),
    hat: (f = msg.getHat()) && proto.sm64js.SkinValue.toObject(includeInstance, f),
    shirt: (f = msg.getShirt()) && proto.sm64js.SkinValue.toObject(includeInstance, f),
    gloves: (f = msg.getGloves()) && proto.sm64js.SkinValue.toObject(includeInstance, f),
    boots: (f = msg.getBoots()) && proto.sm64js.SkinValue.toObject(includeInstance, f),
    skin: (f = msg.getSkin()) && proto.sm64js.SkinValue.toObject(includeInstance, f),
    hair: (f = msg.getHair()) && proto.sm64js.SkinValue.toObject(includeInstance, f),
    customcapstate: jspb.Message.getFieldWithDefault(msg, 8, 0),
    parachute: (f = msg.getparachute()) && proto.sm64js.SkinValue.toObject(includeInstance, f),
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.SkinData}
 */
proto.sm64js.SkinData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.SkinData;
  return proto.sm64js.SkinData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.SkinData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.SkinData}
 */
proto.sm64js.SkinData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sm64js.SkinValue;
      reader.readMessage(value,proto.sm64js.SkinValue.deserializeBinaryFromReader);
      msg.setOveralls(value);
      break;
    case 2:
      var value = new proto.sm64js.SkinValue;
      reader.readMessage(value,proto.sm64js.SkinValue.deserializeBinaryFromReader);
      msg.setHat(value);
      break;
    case 3:
      var value = new proto.sm64js.SkinValue;
      reader.readMessage(value,proto.sm64js.SkinValue.deserializeBinaryFromReader);
      msg.setShirt(value);
      break;
    case 4:
      var value = new proto.sm64js.SkinValue;
      reader.readMessage(value,proto.sm64js.SkinValue.deserializeBinaryFromReader);
      msg.setGloves(value);
      break;
    case 5:
      var value = new proto.sm64js.SkinValue;
      reader.readMessage(value,proto.sm64js.SkinValue.deserializeBinaryFromReader);
      msg.setBoots(value);
      break;
    case 6:
      var value = new proto.sm64js.SkinValue;
      reader.readMessage(value,proto.sm64js.SkinValue.deserializeBinaryFromReader);
      msg.setSkin(value);
      break;
    case 7:
      var value = new proto.sm64js.SkinValue;
      reader.readMessage(value,proto.sm64js.SkinValue.deserializeBinaryFromReader);
      msg.setHair(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCustomcapstate(value);
      break;
    case 9:
      var value = new proto.sm64js.SkinValue;
      reader.readMessage(value,proto.sm64js.SkinValue.deserializeBinaryFromReader);
      msg.setParachute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.SkinData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.SkinData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.SkinData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.SkinData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOveralls();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sm64js.SkinValue.serializeBinaryToWriter
    );
  }
  f = message.getHat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sm64js.SkinValue.serializeBinaryToWriter
    );
  }
  f = message.getShirt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sm64js.SkinValue.serializeBinaryToWriter
    );
  }
  f = message.getGloves();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sm64js.SkinValue.serializeBinaryToWriter
    );
  }
  f = message.getBoots();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sm64js.SkinValue.serializeBinaryToWriter
    );
  }
  f = message.getSkin();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sm64js.SkinValue.serializeBinaryToWriter
    );
  }
  f = message.getHair();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.sm64js.SkinValue.serializeBinaryToWriter
    );
  }
  f = message.getCustomcapstate();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getParachute();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.sm64js.SkinValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional SkinValue overalls = 1;
 * @return {?proto.sm64js.SkinValue}
 */
proto.sm64js.SkinData.prototype.getOveralls = function() {
  return /** @type{?proto.sm64js.SkinValue} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.SkinValue, 1));
};


/**
 * @param {?proto.sm64js.SkinValue|undefined} value
 * @return {!proto.sm64js.SkinData} returns this
*/
proto.sm64js.SkinData.prototype.setOveralls = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.SkinData} returns this
 */
proto.sm64js.SkinData.prototype.clearOveralls = function() {
  return this.setOveralls(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.SkinData.prototype.hasOveralls = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SkinValue hat = 2;
 * @return {?proto.sm64js.SkinValue}
 */
proto.sm64js.SkinData.prototype.getHat = function() {
  return /** @type{?proto.sm64js.SkinValue} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.SkinValue, 2));
};


/**
 * @param {?proto.sm64js.SkinValue|undefined} value
 * @return {!proto.sm64js.SkinData} returns this
*/
proto.sm64js.SkinData.prototype.setHat = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.SkinData} returns this
 */
proto.sm64js.SkinData.prototype.clearHat = function() {
  return this.setHat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.SkinData.prototype.hasHat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SkinValue shirt = 3;
 * @return {?proto.sm64js.SkinValue}
 */
proto.sm64js.SkinData.prototype.getShirt = function() {
  return /** @type{?proto.sm64js.SkinValue} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.SkinValue, 3));
};


/**
 * @param {?proto.sm64js.SkinValue|undefined} value
 * @return {!proto.sm64js.SkinData} returns this
*/
proto.sm64js.SkinData.prototype.setShirt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.SkinData} returns this
 */
proto.sm64js.SkinData.prototype.clearShirt = function() {
  return this.setShirt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.SkinData.prototype.hasShirt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SkinValue gloves = 4;
 * @return {?proto.sm64js.SkinValue}
 */
proto.sm64js.SkinData.prototype.getGloves = function() {
  return /** @type{?proto.sm64js.SkinValue} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.SkinValue, 4));
};


/**
 * @param {?proto.sm64js.SkinValue|undefined} value
 * @return {!proto.sm64js.SkinData} returns this
*/
proto.sm64js.SkinData.prototype.setGloves = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.SkinData} returns this
 */
proto.sm64js.SkinData.prototype.clearGloves = function() {
  return this.setGloves(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.SkinData.prototype.hasGloves = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SkinValue boots = 5;
 * @return {?proto.sm64js.SkinValue}
 */
proto.sm64js.SkinData.prototype.getBoots = function() {
  return /** @type{?proto.sm64js.SkinValue} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.SkinValue, 5));
};


/**
 * @param {?proto.sm64js.SkinValue|undefined} value
 * @return {!proto.sm64js.SkinData} returns this
*/
proto.sm64js.SkinData.prototype.setBoots = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.SkinData} returns this
 */
proto.sm64js.SkinData.prototype.clearBoots = function() {
  return this.setBoots(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.SkinData.prototype.hasBoots = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SkinValue skin = 6;
 * @return {?proto.sm64js.SkinValue}
 */
proto.sm64js.SkinData.prototype.getSkin = function() {
  return /** @type{?proto.sm64js.SkinValue} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.SkinValue, 6));
};


/**
 * @param {?proto.sm64js.SkinValue|undefined} value
 * @return {!proto.sm64js.SkinData} returns this
*/
proto.sm64js.SkinData.prototype.setSkin = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.SkinData} returns this
 */
proto.sm64js.SkinData.prototype.clearSkin = function() {
  return this.setSkin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.SkinData.prototype.hasSkin = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SkinValue hair = 7;
 * @return {?proto.sm64js.SkinValue}
 */
proto.sm64js.SkinData.prototype.getHair = function() {
  return /** @type{?proto.sm64js.SkinValue} */ (
    jspb.Message.getWrapperField(this, proto.sm64js.SkinValue, 7));
};


/**
 * @param {?proto.sm64js.SkinValue|undefined} value
 * @return {!proto.sm64js.SkinData} returns this
*/
proto.sm64js.SkinData.prototype.setHair = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.SkinData} returns this
 */
proto.sm64js.SkinData.prototype.clearHair = function() {
  return this.setHair(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.SkinData.prototype.hasHair = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * @param {?proto.sm64js.SkinValue|undefined} value
 * @return {!proto.sm64js.SkinData} returns this
*/
proto.sm64js.SkinData.prototype.setParachute = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sm64js.SkinData} returns this
 */
proto.sm64js.SkinData.prototype.clearParachute = function() {
  return this.setParachute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.SkinData.prototype.hasParachute = function() {
  return jspb.Message.getField(this, 9) != null;
};

/**
 * optional uint32 customCapState = 8;
 * @return {number}
 */
proto.sm64js.SkinData.prototype.getCustomcapstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.SkinData} returns this
 */
proto.sm64js.SkinData.prototype.setCustomcapstate = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sm64js.SkinValue.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.sm64js.SkinValue.ValueCase = {
  VALUE_NOT_SET: 0,
  BYTES: 1,
  SPECIAL: 2
};

/**
 * @return {proto.sm64js.SkinValue.ValueCase}
 */
proto.sm64js.SkinValue.prototype.getValueCase = function() {
  return /** @type {proto.sm64js.SkinValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.sm64js.SkinValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.SkinValue.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.SkinValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.SkinValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.SkinValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    special: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.SkinValue}
 */
proto.sm64js.SkinValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.SkinValue;
  return proto.sm64js.SkinValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.SkinValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.SkinValue}
 */
proto.sm64js.SkinValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    case 2:
      var value = /** @type {!proto.sm64js.SkinValue.SpecialSkinValues} */ (reader.readEnum());
      msg.setSpecial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.SkinValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.SkinValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.SkinValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.SkinValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.sm64js.SkinValue.SpecialSkinValues} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sm64js.SkinValue.SpecialSkinValues = {
  RAINBOW: 0
};

/**
 * optional uint64 bytes = 1;
 * @return {number}
 */
proto.sm64js.SkinValue.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.SkinValue} returns this
 */
proto.sm64js.SkinValue.prototype.setBytes = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.sm64js.SkinValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sm64js.SkinValue} returns this
 */
proto.sm64js.SkinValue.prototype.clearBytes = function() {
  return jspb.Message.setOneofField(this, 1, proto.sm64js.SkinValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.SkinValue.prototype.hasBytes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SpecialSkinValues special = 2;
 * @return {!proto.sm64js.SkinValue.SpecialSkinValues}
 */
proto.sm64js.SkinValue.prototype.getSpecial = function() {
  return /** @type {!proto.sm64js.SkinValue.SpecialSkinValues} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.sm64js.SkinValue.SpecialSkinValues} value
 * @return {!proto.sm64js.SkinValue} returns this
 */
proto.sm64js.SkinValue.prototype.setSpecial = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.sm64js.SkinValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sm64js.SkinValue} returns this
 */
proto.sm64js.SkinValue.prototype.clearSpecial = function() {
  return jspb.Message.setOneofField(this, 2, proto.sm64js.SkinValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sm64js.SkinValue.prototype.hasSpecial = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sm64js.AnnouncementMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sm64js.AnnouncementMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sm64js.AnnouncementMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.AnnouncementMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timer: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sm64js.AnnouncementMsg}
 */
proto.sm64js.AnnouncementMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sm64js.AnnouncementMsg;
  return proto.sm64js.AnnouncementMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sm64js.AnnouncementMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sm64js.AnnouncementMsg}
 */
proto.sm64js.AnnouncementMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sm64js.AnnouncementMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sm64js.AnnouncementMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sm64js.AnnouncementMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sm64js.AnnouncementMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimer();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.sm64js.AnnouncementMsg.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sm64js.AnnouncementMsg} returns this
 */
proto.sm64js.AnnouncementMsg.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 timer = 2;
 * @return {number}
 */
proto.sm64js.AnnouncementMsg.prototype.getTimer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sm64js.AnnouncementMsg} returns this
 */
proto.sm64js.AnnouncementMsg.prototype.setTimer = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.sm64js);
